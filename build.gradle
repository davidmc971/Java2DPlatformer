import org.gradle.internal.os.OperatingSystem

plugins {
    id 'application'
		id "com.github.johnrengelman.shadow" version "8.1.0"
}

project.ext.lwjglVersion = "3.3.1"
project.ext.jomlVersion = "1.10.5"

switch (OperatingSystem.current()) {
	case OperatingSystem.LINUX:
		def osArch = System.getProperty("os.arch")
		project.ext.lwjglNatives = osArch.startsWith("arm") || osArch.startsWith("aarch64")
			? "natives-linux-${osArch.contains("64") || osArch.startsWith("armv8") ? "arm64" : "arm32"}"
			: "natives-linux"
		break
	case OperatingSystem.MAC_OS:
		project.ext.lwjglNatives = System.getProperty("os.arch").startsWith("aarch64") ? "natives-macos-arm64" : "natives-macos"
		break
	case OperatingSystem.WINDOWS:
		def osArch = System.getProperty("os.arch")
		project.ext.lwjglNatives = osArch.contains("64")
			? "natives-windows${osArch.startsWith("aarch64") ? "-arm64" : ""}"
			: "natives-windows-x86"
		break
}

repositories {
	mavenCentral()
}

// project.ext.lwjglNatives = "natives-windows-x86"

dependencies {
  testImplementation 'org.junit.jupiter:junit-jupiter:5.9.1'
  
	implementation platform("org.lwjgl:lwjgl-bom:$lwjglVersion")

	implementation "org.lwjgl:lwjgl"
	implementation "org.lwjgl:lwjgl-assimp"
	implementation "org.lwjgl:lwjgl-bgfx"
	implementation "org.lwjgl:lwjgl-glfw"
	implementation "org.lwjgl:lwjgl-nanovg"
	implementation "org.lwjgl:lwjgl-nuklear"
	implementation "org.lwjgl:lwjgl-openal"
	implementation "org.lwjgl:lwjgl-opencl"
	implementation "org.lwjgl:lwjgl-opengl"
	implementation "org.lwjgl:lwjgl-par"
	implementation "org.lwjgl:lwjgl-spvc"
	implementation "org.lwjgl:lwjgl-sse"
	implementation "org.lwjgl:lwjgl-stb"
	implementation "org.lwjgl:lwjgl-vma"
	implementation "org.lwjgl:lwjgl-vulkan"
	runtimeOnly "org.lwjgl:lwjgl::$lwjglNatives"
	runtimeOnly "org.lwjgl:lwjgl-assimp::$lwjglNatives"
	runtimeOnly "org.lwjgl:lwjgl-bgfx::$lwjglNatives"
	runtimeOnly "org.lwjgl:lwjgl-glfw::$lwjglNatives"
	runtimeOnly "org.lwjgl:lwjgl-nanovg::$lwjglNatives"
	runtimeOnly "org.lwjgl:lwjgl-nuklear::$lwjglNatives"
	runtimeOnly "org.lwjgl:lwjgl-openal::$lwjglNatives"
	runtimeOnly "org.lwjgl:lwjgl-opengl::$lwjglNatives"
	runtimeOnly "org.lwjgl:lwjgl-par::$lwjglNatives"
	runtimeOnly "org.lwjgl:lwjgl-spvc::$lwjglNatives"
	runtimeOnly "org.lwjgl:lwjgl-sse::$lwjglNatives"
	runtimeOnly "org.lwjgl:lwjgl-stb::$lwjglNatives"
	runtimeOnly "org.lwjgl:lwjgl-vma::$lwjglNatives"
	if (lwjglNatives == "natives-macos" || lwjglNatives == "natives-macos-arm64") runtimeOnly "org.lwjgl:lwjgl-vulkan::$lwjglNatives"

	implementation "org.joml:joml:${jomlVersion}"
}

application {
    mainClass = 'io.github.davidmc971.java2dplatformer.Start'
}

tasks.named('test') {
    useJUnitPlatform()
}

task copyToJars(type: Copy) {
	from(":LWJGL2DPlatformer:shadowJar")
	rename '(.*)-all.jar', '$1.jar'
	into file('jars')
}

task cleanJars() {
  delete file('jars')
}

tasks.named("clean") {
  dependsOn cleanJars
}

tasks.named("build") {
  dependsOn copyToJars
}